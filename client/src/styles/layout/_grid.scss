$grid-columns: 12;
$grid-gutter-width: 30px;
$grid-gap: 12px;

%col-default {
  position: relative;
  width: 100%;
  min-height: 1px;
  padding-left: 15px;
  padding-right: 15px;
}

// Usage
// @include make-grid-columns();


.container {
  width: 100%;

  // padding-right: math.div($grid-gutter-width, 2);
  // padding-left: math.div($grid-gutter-width, 2);
  margin-right: auto;
  margin-left: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;

  // margin-right: -15px;
  // margin-left: -15px;
}

.col {
  @extend %col-default;

  flex-basis: 0; // Determines the initial size of the flex item
  flex-grow: 1; // Allows the item to grow to fill available space
  max-width: 100%; // Prevents columns from exceeding the container width

  // !REVISIT
  background-color: rgb(5 139 110);
  border: solid 1px purple;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 math.div($i, $grid-columns) * 100%;
    max-width: math.div($i, $grid-columns) * 100%;
    background-color: rgb(6 184 184);
    border: solid rgb(184 6 35) 1px;
  }

  @each $key, $value in $media-breakpoints {
    @media #{$value} {
      .col-#{$key}-#{$i} {
        flex: 0 0 math.div($i, $grid-columns) * 100%;
        max-width: math.div($i, $grid-columns) * 100%;
      }
    }
  }
}

@each $key, $value in $media-breakpoints {
    @media #{$value} {
      .col-#{$key}-auto {
        position: relative;
        width: 100%;
        min-height: 1px;
        padding-right: 15px;
        padding-left: 15px;
        background-color: rgb(226 32 64);
      }
    }
  }

.no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

.w-100 {
  width: 100% !important;
}

.d-none {
  display: none !important;
}

.d-block {
  display: block !important;
}
