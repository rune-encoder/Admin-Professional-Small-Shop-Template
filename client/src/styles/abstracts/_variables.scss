// ‚ö†Ô∏è Needs Refactoring
// üü¢ Not Modified

// BASE VARIABLES
$base-unit: 1rem;
$base-font-size: 1rem;
$base-line-height: 1.5;
$base-font-weight: 400;

// MODULAR SCALE (MAJOR THIRD)
$modular-scale: 1.25;

// BORDER RADIUS
$border-radius: rem(5px);
$border-radius-window: rem(10px);
$border-radius-card: rem(15px);

// OPACITY FOR COLORS
$base-opacity: 0.50;

// FONT FAMILIES
$font-families: (
  "inter": ("Inter", system-ui, "Avenir", "Helvetica", "Arial", sans-serif),
  "exo": ("Exo", sans-serif),
  "exo-2": ("Exo 2", sans-serif),
  "roboto": ("Roboto", sans-serif),
  "roboto-condensed": ("Roboto Condensed", "Arial Narrow", sans-serif),
  "ysabeau": ("Ysabeau", sans-serif),
  "ysabeau-infant": ("Ysabeau Infant", sans-serif),
  "ysabeau-office": ("Ysabeau Office", sans-serif),
  "ysabeau-sc": ("Ysabeau SC", sans-serif),
);

// HEADER STEPS FOR MODULAR SCALE (SEE TYPOGRAPHY.SCSS FOR USAGE)
$header-steps: (
  "h1": 6,
  "h2": 5,
  "h3": 4,
  "h4": 3,
  "h5": 2,
  "h6": 1,
);

// MEDIA QUERY BREAKPOINT VALUES
// ! IMPORTANT: INDEPENDENT FROM BOOTSTRAP GRID BREAKPOINTS
$xs-min: 0;
$sm-min: 576px;
$md-min: 768px;
$lg-min: 992px;
$xl-min: 1200px;
$xxl-min: 1400px;

// MEDIA QUERY BREAKPOINTS
$media-breakpoints: (
  "xs": '(min-width: #{0}) and (max-width: #{$sm-min - 1})',
  "sm": '(min-width: #{$sm-min}) and (max-width: #{$md-min - 1})',
  "md": '(min-width: #{$md-min}) and (max-width: #{$lg-min - 1})',
  "lg": '(min-width: #{$lg-min}) and (max-width: #{$xl-min - 1})',
  "xl": '(min-width: #{$xl-min}) and (max-width: #{$xxl-min - 1})',
  "xxl": '(min-width: #{$xxl-min})',
);

// <===== THEME COLOR SECTION =====>
// SHARED COLORS ACROSS THEMES
$shared-colors: (
  // BASE COLORS
  "always-light": hsl(0deg 0% 100%),
  "always-dark": hsl(0deg 0% 7%),

  // !REVISIT THEME COLOR
  "theme": #618adf,

  // UTILITY COLORS
  "hover-primary": hsl(180, 80%, 75%),
  "hover-secondary": hsl(180, 60%, 60%),
);

// !REVISIT AND REFACTOR
// <===== LIGHT THEME COLOR SECTION =====>
// LIGHT THEME COLORS
$light-theme: (
  /* BASE COLORS */ 
  "light": hsl(0deg 0% 100%),
  "opacity-light": hsla(0, 0%, 100%, $base-opacity),
  "dark": hsl(0deg 0% 0%),
  "opacity-dark": hsla(0, 0%, 0%, $base-opacity),

  // UTILITY COLORS
  "selection": hsl(352, 23%, 26%),
);

// LIGHT THEME SHADES OF GRAY
$light-shades: generate-shades("light");

// MERGE LIGHT THEME COLORS AND SHADES
$light-theme: map.merge($light-theme, $light-shades);

// MERGE LIGHT/DARK THEME SHARED COLORS INTO LIGHT THEME
$light-theme: map.merge($light-theme, $shared-colors);

// <===== DARK THEME COLOR SECTION =====>
$dark-theme: (
  // BASE COLORS
  "light": hsl(0deg 0% 0%),
  "opacity-light": hsla(0, 0%, 0%, $base-opacity),
  "dark": hsl(0deg 0% 100%),
  "opacity-dark": hsla(0, 0%, 100%, $base-opacity),

  // UTILITY COLORS
  "selection": hsl(180, 80%, 75%),
  
  "primary": hsl(258, 54%, 18%),
  "secondary": 	hsl(320, 74%, 21%),
);

// DARK THEME SHADES OF GRAY
$dark-shades: generate-shades("dark");

// MERGE DARK THEME COLORS AND SHADES
$dark-theme: map.merge($dark-theme, $dark-shades);

// MERGE LIGHT/DARK THEME SHARED COLORS INTO DARK THEME
$dark-theme: map.merge($dark-theme, $shared-colors);

// Note: All available color themes should have the same color variable names.
// There are times during testing which a color variable may not be available in all themes. (As they have not been added yet)
// This is why we merge the maps of the available themes to create a `$validMaps` map.
// Current available color themes: `$light-theme`, `$dark-theme`
// This is used for mixin checks
$mergedColorThemesMap: map.merge($light-theme, $dark-theme);